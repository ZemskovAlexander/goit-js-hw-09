{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,UAAWC,SAASC,cAAc,SAClCC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,wBACpCI,iBAAkBL,SAASC,cAAc,iBAI3C,IAAIK,EACAC,EA4BJ,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,EAAUS,MAAAR,IAEpBM,EAAO,C,SAAEP,EAAUS,MAAAR,MAEpBA,MAxCPZ,EAAKC,UAAUoB,iBAAiB,UAIhC,SAAyBC,GACvBA,EAAEC,iBACF,IAAIC,EAASC,OAAOzB,EAAKM,YAAYoB,OAIrC,GAHAlB,EAAOiB,OAAOzB,EAAKK,UAAUqB,OAC7BjB,EAAQgB,OAAOzB,EAAKI,WAAWsB,OAE3BF,EAAS,GAAKhB,EAAO,GAAKC,EAAQ,EAEpC,YADAX,EAAA6B,OAAOC,QAAQ,yBAIjB,IAAK,IAAIC,EAAI,EAAGA,GAAKL,EAAQK,GAAK,EAAG,CAGnCnB,EAFemB,EAESpB,GACrBqB,MAAK,EAACnB,SAAEA,EAAUS,MAAAW,KACjBjC,EAAA6B,OAAOK,QAAQ,uBAAqBrB,QAAiBoB,SAAYE,OAElE,EAAOtB,WAAUS,MAAOc,KACvBpC,EAAA6B,OAAMC,QAAC,sBAASjB,QAA8BuB,SAGlDzB,GAASD","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  inputForm: document.querySelector('.form'),\n  firstDelay: document.querySelector('input[name=\"delay\"]'),\n  delayStep: document.querySelector('input[name=\"step\"]'),\n  amountValue: document.querySelector('input[name=\"amount\"]'),\n  createPromiseBtn: document.querySelector('.form button'),\n};\n\nrefs.inputForm.addEventListener('submit', onStartPromises);\nlet step;\nlet delay;\n\nfunction onStartPromises(e) {\n  e.preventDefault();\n  let amount = Number(refs.amountValue.value);\n  step = Number(refs.delayStep.value);\n  delay = Number(refs.firstDelay.value);\n\n  if (amount < 0 || step < 0 || delay < 0) {\n    Notify.failure('Enter positive values');\n    return;\n  }\n\n  for (let i = 1; i <= amount; i += 1) {\n    let position = i;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) =>\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n      )\n      .catch(({ position, delay }) =>\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n      );\n\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","inputForm","document","querySelector","firstDelay","delayStep","amountValue","createPromiseBtn","$47d4ff9957288465$var$step","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$createPromise","position","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","delay","addEventListener","e","preventDefault","amount","Number","value","Notify","failure","i","then","delay1","success","catch","delay2"],"version":3,"file":"03-promises.67731cad.js.map"}